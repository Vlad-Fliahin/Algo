#pragma ggCC optimize("Ofast")

# define _CRT_SECURE_NO_WARNINggS
# include <iostream>
# include <cmath>
# include <algorithm>
# include <stdio.h>
# include <cstdint>
# include <cstring>
# include <string>
# include <cstdlib>
# include <vector>
# include <bitset>
# include <map>
# include <queue>
# include <ctime>
# include <stack>
# include <set>
# include <list>
# include <random>
# include <deque>
# include <functional>
# include <iomanip>
# include <sstream>
# include <fstream>
# include <complex>
# include <numeric>
# include <immintrin.h>
# include <cassert>
# include <array>
# include <tuple>
# include <cctype>
# include <unistd.h>
# include <unordered_map>
# include <unordered_set>
 
using namespace std;
 
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define pb push_back
#define mp make_pair
    
template <class T> inline T gcd(T a, T b) { while (b) { T t = a % b; a = b; b = t; } return a; }
tuple<int, int, int> gcd(int a, int b) {
    if (b == 0)
        return {1, 0, a};
    int x, y, g;
    tie(x, y, g) = gcd(b, a % b);
    return {y, x - a/b * y, g};
}
 
ll modpow(ll x, ll n, ll m) {
    if (n == 1)
        return 1;
    ll u = modpow(x, n / 2, m);
    u = (u*u) % m;
    if (n % 2 == 1)
        u = (u*x) % m;
    return u;
}

struct node // структура для представления узлов дерева
{
    int key;
    unsigned char height;
    node* left;
    node* right;
    node(int k) { key = k; left = right = 0; height = 1; }
};

class BBST {
    public :node* p;
    
    public :BBST() {
        p = nullptr;
    }
    
    unsigned char height(node* p)
    {
        return p?p->height:0;
    }

    int bfactor(node* p)
    {
        return height(p->right)-height(p->left);
    }

    void fixheight(node* p)
    {
        unsigned char hl = height(p->left);
        unsigned char hr = height(p->right);
        p->height = (hl>hr?hl:hr)+1;
    }

    node* rotateright(node* p) // правый поворот вокруг p
    {
        node* q = p->left;
        p->left = q->right;
        q->right = p;
        fixheight(p);
        fixheight(q);
        return q;
    }

    node* rotateleft(node* q) // левый поворот вокруг q
    {
        node* p = q->right;
        q->right = p->left;
        p->left = q;
        fixheight(q);
        fixheight(p);
        return p;
    }

    node* balance(node* p) // балансировка узла p
    {
        fixheight(p);
        if(bfactor(p) == 2)
        {
            if(bfactor(p->right) < 0)
                p->right = rotateright(p->right);
            return rotateleft(p);
        }
        if (bfactor(p) == -2)
        {
            if( bfactor(p->left) > 0  )
                p->left = rotateleft(p->left);
            return rotateright(p);
        }
        return p; // балансировка не нужна
    }

    node* insert(node* p, int k) // вставка ключа k в дерево с корнем p
    {
        if (!p) return new node(k);
        if (k < p->key)
            p->left = insert(p->left,k);
        else
            p->right = insert(p->right,k);
        return balance(p);
    }

    node* findmin(node* p) // поиск узла с минимальным ключом в дереве p
    {
        return p->left?findmin(p->left):p;
    }

    node* removemin(node* p) // удаление узла с минимальным ключом из дерева p
    {
        if( p->left==0 )
            return p->right;
        p->left = removemin(p->left);
        return balance(p);
    }

    node* remove(node* p, int k) // удаление ключа k из дерева p
    {
        if( !p ) return 0;
        if( k < p->key )
            p->left = remove(p->left,k);
        else if( k > p->key )
            p->right = remove(p->right,k);
        else //  k == p->key
        {
            node* q = p->left;
            node* r = p->right;
            delete p;
            if( !r ) return q;
            node* min = findmin(r);
            min->right = removemin(r);
            min->left = q;
            return balance(min);
        }
        return balance(p);
    }
    bool search(int k, node* p) {
        if (k < p->key)
            return search(k, p->left);
        else if (k > p->key)
            return search(k, p->right);
        else
            return true;
    }
    bool isFull() {
        return false;
    }
    bool isEmpty(node* p) {
        return p ? true : false;
    }
    int size(node* p) {
        return height(p->left) + height(p->right) + 1;
    }
    void preorder(node* p) {
        if (!p)
            return;
        cout << p->key << " ";
        preorder(p->left);
        preorder(p->right);
    }
    void inorder(node* p){
        if (!p)
            return;
        inorder(p->left);
        cout << p->key << " ";
        inorder(p->right);
    }
    void postorder(node* p) {
        if (!p)
            return;
        postorder(p->right);
        postorder(p->left);
        cout << p->key << " ";
    }
    node* deleteEven(node* p) {
        vector <int> a;
        vector <int> v = travel(p, a);
        
        for (int i = 0; i < v.size(); ++i) {
            p = remove(p, v[i]);
        }
        
        return p;
    }
    vector <int> travel(node* p, vector <int> v) {
        if (!p)
            return v;
        if (p->key % 2 == 0) {
            v.push_back(p->key);
        }
        v = travel(p->left, v);
        v = travel(p->right, v);
        
        return v;
    }
    void print_Tree(node* p,int level)
    {
        if(p)
        {
            print_Tree(p->right, level + 1);
            for (int i = 0; i < level; ++i) cout << "   ";
            cout << p->key << "\n";
            print_Tree(p->left, level + 1);
        }
    }
};

int main()
{
    BBST bt;
    
    int n, k;
    char c;
    string opr = "";
    
    cout << "Insert number of operations: ";
    cin >> n;
    
    cout << "Use \'1\' to add item, \'2\' to delete item, \'3\' to preorder, \'4\'to inorder, \n \'5\' to postorder, \'6\' for search, \'7\' for deleteEven, \'8\' to print tree\n";
    
    while (n --> 0) {
        cin >> c;
        
        switch (c) {
            case '1':
                cout << "Insert key: ";
                cin >> k;
                bt.p = bt.insert(bt.p, k);
                bt.inorder(bt.p);
                cout << "\n";
                break;
            case '2':
                cout << "Insert key: ";
                cin >> k;
                bt.p = bt.remove(bt.p, k);
                bt.inorder(bt.p);
                cout << "\n";
                break;
            case '3':
                bt.preorder(bt.p);
                cout << "\n";
                break;
            case '4':
                bt.inorder(bt.p);
                cout << "\n";
                break;
            case '5':
                bt.postorder(bt.p);
                cout << "\n";
                break;
            case '6':
                cout << "Insert key: ";
                cin >> k;
                if (bt.search(k, bt.p)) {
                    cout << "Exists\n";
                } else {
                    cout << "Doesn't esixt\n";
                }
                bt.inorder(bt.p);
                cout << "\n";
                break;
            case '7':
                bt.p = bt.deleteEven(bt.p);
                bt.inorder(bt.p);
                cout << "\n";
                break;
            case '8':
                bt.print_Tree(bt.p, 0);
                cout << "\n";
                break;
            default:
                cout << "Incorrect input!\n";
                break;
        }
    }
}
