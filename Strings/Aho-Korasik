# include <iostream>
# include <cmath>
# include <algorithm>
# include <stdio.h>
# include <cstdint>
# include <cstring>
# include <string>
# include <cstdlib>
# include <vector>
# include <bitset>
# include <map>
# include <queue>
# include <ctime>
# include <stack>
# include <set>
# include <list>
# include <random>
# include <deque>
# include <functional>
# include <iomanip>
# include <sstream>
# include <fstream>
# include <complex>
# include <numeric>
# include <immintrin.h>
# include <cassert>
# include <array>
# include <tuple>
# include <cctype>
# include <unistd.h>
# include <unordered_map>
# include <unordered_set>
//#include <bits/stdc++.h>

#define forn(i, n) for (int i = 0; i < (n); i++)
#define forx(i,x,n) for (int i = x; i < (n); i++)
#define form(i, n) for (int i = n-1; i>=0; i--)
#define all(x) (x).begin(), (x).end()
#define sz(a) a.size()
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned ll
#define srt(a) sort(a.begin(), a.end());
#define fi first
#define pll pair<ll, ll>
#define pii pair<int,int>
#define se second

using namespace std;

template <class T> inline T gcd(T a, T b) { while (b) { T t = a % b; a = b; b = t; } return a; }
template <class T> inline T lcm(T a, T b) { return a * b / gcd(a, b); }

const ll MAXN = 1e6 + 7, MAX_OP = 3, PRIME_1 = 29, PRIME_2 = 31, MAX_ALPHABET = 200, INF = 1e9 + 7, MOD = 1e15 + 7, SIZE = 100, P = 5;

ll sqr(ll a) {
    return a * a;
}

// Write Trie
struct node {
    node *next_link[MAX_ALPHABET], *suff_link, *up_link, *children[MAX_ALPHABET], *parent;
    bool is_terminal = false;
    int strings;
    char back_char;
    string data;
    
    node(node *p, char c) {
        for (int i = 0; i < MAX_ALPHABET; ++i) {
            next_link[i] = nullptr;
            children[i] = nullptr;
        }
        
        is_terminal = false;
        strings = 0;
        parent = p;
        back_char = c;
        suff_link = nullptr;
//        data = p->data + c;
    }
};

node *root = new node(nullptr, 'a');

void add(string s) {
    node *cur = root;
    
    for (int i = 0; i < s.size(); ++i) {
        if (cur->next_link[s[i]] == nullptr)
            cur->next_link[s[i]] = new node(cur, s[i]);
        cur = cur->next_link[s[i]];
    }
    cur->is_terminal = true;
    cur->strings += 1;
    cur->data = s;
}

node* get_next_link(node *cur, char c);

node* get_suff_link(node *cur) { // Суфф ссылка
    if (cur->suff_link == nullptr) {
        if (cur == root || cur->parent == root)
            cur->suff_link = root;
        else
            cur->suff_link = get_next_link(get_suff_link(cur->parent), cur->back_char);
    }
    return cur->suff_link;
}

node* get_next_link(node *cur, char c) { // Переход по символу
    if (cur->next_link[c] == nullptr) {
        if (cur->children[c] != nullptr)
            cur->next_link[c] = cur->children[c];
        else if (cur == root)
            cur->next_link[c] = root;
        else
            cur->next_link[c] = get_next_link(get_suff_link(cur), c);
    }
    return cur->next_link[c];
}

node* get_up_link(node *cur) { // Сжатая суфф ссылка
    if (cur->up_link == nullptr) {
        if ((get_suff_link(cur))->is_terminal)
            cur->up_link = get_suff_link(cur);
        else if (get_suff_link(cur) == root)
            cur->up_link = root;
        else
            cur->up_link = get_up_link(get_suff_link(cur));
    }
    return cur->up_link;
}

vector<string> contain(string s) {
    vector<string> ans;
    node *cur = root;
    for (auto c : s) {
        cur = get_next_link(cur, c);
        node *up_node = cur;
    
        while (up_node != root) {
            if (up_node->is_terminal)
                ans.pb(up_node->data);
            up_node = get_up_link(up_node);
        }
    }
    return ans;
}

void solve() {
    int n;
    string s, text = "˜˜˜";

    getline(cin, s);
    n = stoi(s);
    for (int i = 0; i < n; ++i) {
        getline(cin, s);
        add(s);
    }
    
    while (true) {
        getline(cin, text);
        if (text == "˜˜˜")
            break;
        
        vector<string> ans = contain(text);
        if (ans.size() > 0)
            cout << text << "\n";
        text = "˜˜˜";
    }
}

auto main() -> int {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    solve();
    return 0;
}

