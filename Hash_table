# include <iostream>
# include <cmath>
# include <algorithm>
# include <stdio.h>
# include <cstdint>
# include <cstring>
# include <string>
# include <cstdlib>
# include <vector>
# include <bitset>
# include <map>
# include <queue>
# include <ctime>
# include <stack>
# include <set>
# include <list>
# include <random>
# include <deque>
# include <functional>
# include <iomanip>
# include <sstream>
# include <fstream>
# include <complex>
# include <numeric>
# include <immintrin.h>
# include <cassert>
# include <array>
# include <tuple>
# include <cctype>
# include <unistd.h>
# include <unordered_map>
# include <unordered_set>
//#include <bits/stdc++.h>

#define forn(i, n) for (int i = 0; i < (n); i++)
#define forx(i,x,n) for (int i = x; i < (n); i++)
#define form(i, n) for (int i = n-1; i>=0; i--)
#define all(x) (x).begin(), (x).end()
#define sz(a) int(a.size())
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned ll
#define srt(a) sort(a.begin(), a.end());
#define fi first
#define pl pair<long long,long long>
#define pi pair<int,int>
#define se second

using namespace std;

const ll N = 1e6;
const ll md = 1e9 + 7;
const int inf = 1e9;
const double e = 1e-18;

template <class T> inline T gcd(T a, T b) { while (b) { T t = a % b; a = b; b = t; } return a; }
template <class T> inline T lcm(T a, T b) { return a * b / gcd(a, b); }

const int MAXN = 1e5 + 7, INF = 1e9 + 7, MOD = 451, SIZE = 100, P = 5;

ll sqr(ll a) {
    return a * a;
}

ull binpow(ull a, ull n) {
    ull res = 1;
    while (n > 0) {
        if (n & 1)
            res *= a;
        a *= a;
        n /= 2;
    }
    
    return res;
}

int hash_function(int n) {
    ull hash = 0, i = 0;

    while (n > 0) {
        hash += (n % 10) * binpow(P, i);
        n -= n % 10;
        n /= 10;
        ++i;
    }

    return hash % SIZE;
    //return n % 100;
}

vector <stack<int>> hash_table(SIZE);

void solve(int n) {
    srand(time(0));
    int collisions = 0;
    forn (i, n) {
        int key = rand() % MOD + 1, hash = hash_function(key);
        hash_table[hash].push(key);
        
        if (hash_table[hash].size() > 1) {
            ++collisions;
        }
    }
    
    cout << "Quantity of collisions: " << collisions << "\n";
    
    forn (i, SIZE) {
        cout << i << ": ";
        stack<int> LinkedList = hash_table[i];
        vi list;
        
        if (LinkedList.size() == 0) {
            cout << "\n";
            continue;
        }
        
        while (!LinkedList.empty()) {
            list.push_back(LinkedList.top());
            LinkedList.pop();
        }
        
        form (i, list.size()) {
            cout << list[i] << " ";
        }
        cout << "\n";
    }
    
    return;
}

deque<int> intersect_linked_lists(deque <int> dq1, deque <int> dq2) {
    deque<int> dq;
    
    while (!dq1.empty() && !dq2.empty()) {
        int a = dq1.front(), b = dq2.front();
        
        if (a == b) {
            dq.push_back(a);
            dq1.pop_front();
            dq2.pop_front();
            continue;
        }
        
        if (a < b) {
            dq1.pop_front();
            continue;
        }
        
        if (a > b) {
            dq2.pop_front();
            continue;
        }
    }
    
    return dq;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    
    int n, size, a;
    
    cout << "Insert number of keys to write in hash table: ";
    cin >> n;
    
    solve(n);
    
    deque<int> dq1, dq2;
    
    cout << "Insert size of first linked list: ";
    cin >> size;
    
    forn (i, size) {
        cin >> a;
        dq1.push_back(a);
    }
    
    cout << "Insert size of second linked list: ";
    cin >> size;
    
    forn (i, size) {
        cin >> a;
        dq2.push_back(a);
    }
    
    deque<int> dq = intersect_linked_lists(dq1, dq2);
    
    cout << "Result linked list:\n";
    
    while (!dq.empty()) {
        cout << dq.front() << " ";
        dq.pop_front();
    }
    
    return 0;
}

